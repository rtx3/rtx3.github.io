---
layout: post
title: "celery 笔记\_"
tagline: 架构
category: null
tags: []
published: true

---
## 架构 笔记##
###Nginx ###
![nginx](http://www.rowkey.me/images/blog_images/nginx/ngx_arch.jpg)
* 一个 master 进程负责分配工作,master进程主要用来管理worker进程


worker进程则是处理基本的网络事件。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。

开发模型：epoll和kqueue。

支持的事件机制：kqueue、epoll、rt signals、/dev/poll 、event ports、select以及poll。

1.1 负载均衡

* 加权均衡
![weight](http://www.rowkey.me/images/blog_images/nginx/ngx_wr.png)
排序 -> 链接 -> 减重 ->排序


* iphash

'''
 for(i = 0;i < 3;i++){
     hash = (hash * 113 + iphp->addr[i]) % 6271; 
 }

 p = hash % iphp->rrp.peers->number; 
'''

hash 值与 ip 和后端机器数量有关,最大1045个值.当经过20次hash仍然找不到可用的机器时，算法退化成轮询。如果两个ip的初始hash值恰好相同，那么来自这两个ip的请求将永远落在同一台服务器上，这为均衡性埋下了很深的隐患。

* fair

是根据后端服务器的响应时间判断负载情况，从中选出负载最轻的机器进行分流.

* 通用hash、一致性hash


* session_sticky
一次会话内的请求都会落到同一个结点上



