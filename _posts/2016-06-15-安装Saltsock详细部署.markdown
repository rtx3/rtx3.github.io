---
layout: post
title: 安装Saltstack详细部署
tagline: "saltstack 运维 自动化运维 paas\_"
category: null
tags: []
published: true

---

##0x01 安装

按照[官网][1]的说明安装(此安装适用于Debian)Cenos使用[这里][2]的说明

1.取得saltstack的KEY
`wget -O - http://repo.saltstack.com/apt/debian/7/amd64/2016.3/SALTSTACK-GPG-KEY.pub | sudo apt-key add -`

2.创建文件**etc/apt/sources.list.d/saltstack.list:**
`deb http://repo.saltstack.com/apt/debian/7/amd64/2016.3 wheezy main`

3.**sudo apt-get update**

4.按照服务器不同角色选择安装以下部件

`
* sudo apt-get install salt-master
* sudo apt-get install salt-minion
* sudo apt-get install salt-ssh
* sudo apt-get install salt-syndic
* sudo apt-get install salt-cloud
* sudo apt-get install salt-api
`

接下来是minion和master之间的key认证过程,过程非常简单,可以参考[这篇文件][4]

* master和minion版本需一致

##0x02 Grains

Grain翻译过来其实是**谷物**的意思,开发Saltstack的团队真的挺有意思.

那么首先Grains到底是什么呢?

讲到本质,Granins其实是一对配置文件而已.通过Saltstack本省带有的逻辑关系来进行各种关系处理.举个例子,如果我们要在服务器上安装pip,我们只要在入口配置文件*top.sls*里面写入:

`include python-pip`

而python-pip是指定目录下的子目录,其中的*init.sls*文件会指明具体安装python-pip所需要的软件包,甚至可以根据OS的不同执行不同的安装命令.

总结的来说,Grains可以实现以下这些功能:

`
* 获取minion上的某些信息并返回
* 依照Grains的模板对minion进行软件安装,前提是minion可以连接到更新源,或者自有源
* 对minion某些状态进行检查,实现监控.
* 成批远程执行任何命令,在管理成百上千台服务器时尤其管用.**一夜之间DD所有服务器也是有可能的**.所以当部署在生产环境时,要考虑到角色的权限等问题.
* Saltstack最大的好处,可以在一台有公网ip的服务器上对内网服务器进行操作配置(原理和rpc转发相同)
`

接下里简单的讲下Saltstack的Grains是如何部署的.

首先.这里有一篇写的很不错的[saltstack教程][3],其中的roles配置非常不错,值得参考.

Saltstack的默认root file位置是*/srv/salt*,其一般结构如下:

`
/srv/salt/:
          top.sls
          /package
                  init.sls
          /roles
                  role.sls
`

*sls文件格式是yaml,注意每行的缩进*

top.sls是saltstack默认读取的首个文件,如果不配置分组不配置roles,则只需要在top.sls里面制定每个node的配置模板即可.这是一个topsls配置:

`
base:                        #ID 不可重复
  '*':                       #匹配node,详细参考[compound module][5]
    - roles.common           #匹配到的node引入到/srv/salt/role/common.sls
  'admin.grid.mall.com':  
    - roles.admin  
  'ha.grid.mall.com':  
    - roles.ha  
  'web*.grid.mall.com':  
    - roles.web  
  'cache*.grid.mall.com':  
    - roles.cache  
  'mc*.grid.mall.com':  
    - roles.mc  
  'db*.grid.mall.com':  
    - roles.db  
  'search*.grid.mall.com':  
    - roles.search  
  'storage*'.grid.mall.com':  
    - roles.storage
`


在对应的common.sls中include各个grains,引到对应目录中的init.sls:


`
include:        #引入此包所需要的基础包
  - ntp

'/usr/sbin/ntpdate 1.cn.pool.ntp.org 1.asia.pool.ntp.org': #不可重复的ID
  cron.present:               #saltstack的state语法,可以参考[saltstack语法页面][6]
    - user: root
    - minute: 0
    - hour: 2

`

总之,Grains是一个很简单的配置系统,需要注意的是sls文件的缩进和唯一ID的问题.

##0x03 Pillarg
Pillar和Grains一样是一种saltstack的交互模式.和Grains不一样的是,Grains会把每一个命令都发送给所有minion,而由minion端去决定是否要执行对应的命令.相对的pillar只会把对应的数据传给对应的minion,比较适合储存敏感数据.


比方说在pillar下面的top.sls有以下内容:

`
apache: httpd
git: git
`

在grains下面的sls文件中可以这么调用:

`
 {{ pillar['apache'] }}
 
 {{ salt['pillar.get']('git', 'git') }}
 
`




[1]:https://repo.saltstack.com/#debian "Saltstack"
[2]:https://repo.saltstack.com/#rhel   "Centos Salt"
[3]:https://github.com/ist0ne/salt-states  "Salt Github"
[4]:http://www.saltstack.cn/kb/salt-first-view/#salt-first-view "Saltstack初探"
[5]:https://docs.saltstack.com/en/latest/topics/targeting/compound.html "Saltstack compound module"
[6]:https://docs.saltstack.com/en/latest/ref/states/all/salt.states.cron.html "cron"